# Zookeeper-StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: zookeeper
spec:
  serviceName: "zookeeper"
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      containers:
        - name: zookeeper
          image: confluentinc/cp-zookeeper:7.5.0
          ports:
            - containerPort: 2181
          env:
            - name: ZOOKEEPER_CLIENT_PORT
              value: "2181"
            - name: ZOOKEEPER_TICK_TIME
              value: "2000"
            - name: ZOOKEEPER_SERVER_ID
              value: "1"
          resources:
            limits:
              cpu: "0.5"
              memory: "512Mi"
            requests:
              cpu: "0.2"
              memory: "256Mi"
---
# Zookeeper-Service
apiVersion: v1
kind: Service
metadata:
  name: zookeeper
spec:
  ports:
    - port: 2181
      name: client
  selector:
    app: zookeeper
  clusterIP: None
---
# Kafka-StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
spec:
  serviceName: "kafka"
  replicas: 1
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      # init container to wait for Zookeeper
      initContainers:
        - name: wait-for-zookeeper
          image: busybox:1.36
          command: ['sh', '-c', 'until nc -z -w 2 zookeeper.default.svc.cluster.local 2181; do echo "Waiting for Zookeeper..."; sleep 2; done;']
      containers:
        - name: kafka
          image: wurstmeister/kafka:2.13-2.8.1
          ports:
            - containerPort: 9092
              name: kafka
          env:
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: zookeeper:2181
            - name: KAFKA_ADVERTISED_LISTENERS
              value: PLAINTEXT://kafka.default.svc.cluster.local:9092
            - name: KAFKA_LISTENERS
              value: PLAINTEXT://:9092
            - name: KAFKA_BROKER_ID
              value: "0"
            - name: KAFKA_CREATE_TOPICS
              value: "orders:1:1"
          resources:
            limits:
              cpu: "1"
              memory: "1Gi"
            requests:
              cpu: "0.5"
              memory: "512Mi"
          volumeMounts:
            - name: kafka-storage
              mountPath: /var/lib/kafka/data # Default data directory for this image
  volumeClaimTemplates:
    - metadata:
        name: kafka-storage
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 256Mi
---
# Kafka-Service
apiVersion: v1
kind: Service
metadata:
  name: kafka
spec:
  ports:
    - port: 9092
      name: kafka
  selector:
    app: kafka
  clusterIP: None
---
# Dapr Pub/Sub Component (Kafka)
apiVersion: dapr.io/v1alpha1
kind: Component
metadata:
  name: pubsub
spec:
  type: pubsub.kafka
  version: v1
  metadata:
    - name: brokers # Required. Kafka broker connection setting
      # Use the Kafka service FQDN
      value:  kafka.default.svc.cluster.local:9092
    - name: authType
      value: "none"
---
# PostgreSQL-StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgresql
spec:
  serviceName: "postgresql" # Must match the Service name
  replicas: 1
  selector:
    matchLabels:
      app: postgresql
  template:
    metadata:
      labels:
        app: postgresql
    spec:
      containers:
        - name: postgresql
          image: postgres:15
          ports:
            - containerPort: 5432
              name: postgres
          env:
            - name: POSTGRES_USER
              value: postgres
            - name: POSTGRES_PASSWORD
              value: postgres
            - name: POSTGRES_DB
              value: dapr
          # readiness probe for PostgreSQL
          readinessProbe:
            tcpSocket:
              port: 5432
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            tcpSocket:
              port: 5432
            initialDelaySeconds: 15
            periodSeconds: 20
          resources:
            limits:
              cpu: "1"
              memory: "1Gi"
            requests:
              cpu: "0.5"
              memory: "512Mi"
          volumeMounts:
            - name: postgresql-data
              mountPath: /var/lib/postgresql/data # Default data directory for this image
      # Define volume claim templates for persistent storage
  volumeClaimTemplates:
    - metadata:
        name: postgresql-data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 256Mi
---
# PostgreSQL-Service
apiVersion: v1
kind: Service
metadata:
  name: postgresql
spec:
  ports:
    - port: 5432
      targetPort: 5432 # Target port should match container port
      name: postgres
  selector:
    app: postgresql
  clusterIP: None # Changed to default ClusterIP
---
# Dapr State Store Component (PostgreSQL)
apiVersion: dapr.io/v1alpha1
kind: Component
metadata:
  name: kvstore
spec:
  type: state.postgresql
  version: v1
  metadata:
    # Ensure PostgreSQL is ready before Dapr tries to connect
    - name: connectionString
      # Use the PostgreSQL service FQDN
      value: "host=postgresql.default.svc.cluster.local user=postgres password=postgres port=5432 connect_timeout=10 database=dapr sslmode=disable"
---
# Zipkin Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zipkin
spec:
  replicas: 1
  selector:
    matchLabels:
      app: zipkin
  template:
    metadata:
      labels:
        app: zipkin
    spec:
      containers:
        - name: zipkin
          image: openzipkin/zipkin:3.5
          ports:
            - containerPort: 9411
          resources:
            limits:
              cpu: "0.5"
              memory: "512Mi"
            requests:
              cpu: "0.2"
              memory: "256Mi"
---
# Zipkin Service
apiVersion: v1
kind: Service
metadata:
  name: zipkin
spec:
  type: ClusterIP
  ports:
    - port: 9411
      targetPort: 9411
      name: http
  selector:
    app: zipkin
---
# Dapr Tracing Configuration
apiVersion: dapr.io/v1alpha1
kind: Configuration
metadata:
  #        Wenn die Anwendungen diese Konfiguration nutzen (über dapr.io/config: "tracing" in ihrer Deployment-Annotation), werden automatisch Traces für Service-zu-Service-Kommunikation erstellt und an Zipkin gesendet.
  name: tracing
  namespace: default
spec:
  tracing:
    samplingRate: "1" # Use "1" for 100% sampling, adjust as needed
    zipkin:
      # Use the internal Zipkin service name
      endpointAddress: "http://zipkin.default.svc.cluster.local:9411/api/v2/spans"
---
# Shop-Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: shop-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sweets-shop
  template:
    metadata:
      labels:
        app: sweets-shop
        app.kubernetes.io/name: sweets-shop
        app.kubernetes.io/part-of: sweets-shop
        app.kubernetes.io/version: 0.0.1
      annotations:
        dapr.io/enabled: "true"
        dapr.io/app-id: "shop"
        dapr.io/app-port: "8080"
        dapr.io/config: "tracing"
    spec:
      initContainers:
        # Waits for PostgreSQL to be connectable before starting the main container
        - name: wait-for-postgres
          image: busybox:1.36
          command: ['sh', '-c', 'until nc -z -w 2 postgresql.default.svc.cluster.local 5432; do echo "Shop waiting for PostgreSQL..."; sleep 2; done; echo "PostgreSQL ready for Shop!"']
      containers:
        - name: sweets-shop
          image: shop:0.0.1-SNAPSHOT
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: 8080
            initialDelaySeconds: 20
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /actuator/health
              port: 8080
            initialDelaySeconds: 20
            periodSeconds: 10
          resources:
            limits:
              cpu: "1"
              memory: "2Gi"
            requests:
              cpu: "1"
              memory: "2Gi"
          ports:
            - containerPort: 8080
---
# Shop-Service
apiVersion: v1
kind: Service
metadata:
  name: shop-service
spec:
  selector:
    app: sweets-shop
  ports:
    - port: 80 # Exposed port
      targetPort: 8080 # Container port
      nodePort: 30080 #
  type: NodePort
---
# Warehouse-Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: warehouse-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sweets-warehouse
  template:
    metadata:
      labels:
        app: sweets-warehouse
        app.kubernetes.io/name: sweets-warehouse
        app.kubernetes.io/part-of: sweets-warehouse
        app.kubernetes.io/version: 0.0.1
      annotations:
        dapr.io/enabled: "true"
        dapr.io/app-id: "warehouse"
        dapr.io/app-port: "8080"
        dapr.io/config: "tracing"
    spec:
      initContainers:
        # Waits for PostgreSQL to be connectable
        - name: wait-for-postgres
          image: busybox:1.36
          command: ['sh', '-c', 'until nc -z -w 2 postgresql.default.svc.cluster.local 5432; do echo "Warehouse waiting for PostgreSQL..."; sleep 2; done; echo "PostgreSQL ready for Warehouse!"']
      containers:
        - name: sweets-warehouse
          image: warehouse:0.0.1-SNAPSHOT
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: 8080
            initialDelaySeconds: 20
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /actuator/health
              port: 8080
            initialDelaySeconds: 20
            periodSeconds: 10
          resources:
            limits:
              cpu: "1"
              memory: "2Gi"
            requests:
              cpu: "1"
              memory: "2Gi"
          ports:
            - containerPort: 8080

---
# Billing-Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: billing-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sweets-billing
  template:
    metadata:
      labels:
        app: sweets-billing
        app.kubernetes.io/name: sweets-billing
        app.kubernetes.io/part-of: sweets-billing
        app.kubernetes.io/version: 0.0.1
      annotations:
        dapr.io/enabled: "true"
        dapr.io/app-id: "billing"
        dapr.io/app-port: "8080"
        dapr.io/config: "tracing"
    spec:
      initContainers:
        # Waits for PostgreSQL to be connectable
        - name: wait-for-postgres
          image: busybox:1.36
          command: ['sh', '-c', 'until nc -z -w 2 postgresql.default.svc.cluster.local 5432; do echo "Billing waiting for PostgreSQL..."; sleep 2; done; echo "PostgreSQL ready for Billing!"']
      containers:
        - name: sweets-billing
          image: billing:0.0.1-SNAPSHOT
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /actuator/health # Ensure this path exists
              port: 8080
            initialDelaySeconds: 20 # Increased delay after initContainer
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /actuator/health # Ensure this path exists
              port: 8080
            initialDelaySeconds: 20 # Increased delay after initContainer
            periodSeconds: 10
          resources:
            limits:
              cpu: "1"
              memory: "2Gi"
            requests:
              cpu: "1"
              memory: "2Gi"
          ports:
            - containerPort: 8080
---
# Zipkin UI Service (NodePort for external access)
apiVersion: v1
kind: Service
metadata:
  name: zipkin-ui
spec:
  selector:
    app: zipkin
  ports:
    - port: 9411 # Internal port
      targetPort: 9411 # Container port
      nodePort: 30411 # External port on the node
  type: NodePort # Exposes the service on each Node's IP at a static port
